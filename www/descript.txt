HTML: нюансы
-----------------------------------------------------
Общее

1. Кодировка UTF-8 без BOM
2. Всегда помните о прогрессивном улучшении: даже "голый" HTML должен быть логичен, полностью функционален, не включать лишние элементы.
3. Независимые блоки должны иметь индивидуальные обертки
4. Избегайте инлайн-CSS и инлайн-JS стилей
5. Для связи с JS не используйте стилизующие классы! Используйте id, data-атрибуты или классы с приставкой js- (нужно избегать стилизации по классам с приставкой js-).
6. Для неадаптивных сайтов указывайте ширину вьюпорта:
<meta name="viewport" content="width=1024"> (по ширине контентной области, как правило)
7. Skype-плагин не должен ломать верстку
8. Единый минимизированный CSS-файл подключаем в секции <head>
9. JS-фреймворки и единый минимизированный JS-файл подключаем перед </body>

Атрибуты

1. Избегайте сокращений слов (.btn - можно)
2. Атрибут class лучше писать первым
3. Несколько значений одного атрибута разделяйте двойным пробелом. Пример: class="class1  class2"

Написание, комментарии

1. Структурные блоки в коде разделяйте 3-мя пустыми строками
2. Важные элементы страницы (навигация, контент) располагайте кк можно выше по коду
3. Избегайте пустых тегов. (Сброс float-ов пустым div-ом - самая частая причина убийств)
4. Избегайте комментариев в конце строки. Разделяйте длинные комментарии на несколько строк
5. При внесении правок добавляйте комментарии с метками (инициалы, дата, возможно - причина правки)
Пример правки: NG 2014 08 06
6. Закомментированный HTML допустим только если это разметка, выводимая по условию

Текст, типографика

1. Для неконтентных заголовков (сайдбар) обязательно должны быть указаны классы - теги заголовков должны легко заменяться на любые другие
2. Прописывайте корректную иерархию заголовков. Помните, что по спецификации семантические теги формируют собственную иерархию заголовков

Формы

1. Для флажков (чекбоксов) и радиокнопок с расположенным рядом текстом нужен label
2. Обязательность заполнения прописывайте, как минимум, атрибутом required.
3. Для input исползуйте подходящие значения атрибута type, min, max, autocomplete

Юзабилити

1. У каждой иконки-ссылки обязательно должна быть подсказка (и скрытый текстовый узел)
2. Логотип сайта делайте ссылкой на главную страницу



------------------------------------------------------------------
Семантика HTML5
------------------------------------------------------------------

Выбор между article, section, div

1. article - "самостоятельная часть документа". Что-либо, имеющее смысл вне зависимости от остального содержания. Почти всегда имеет заголовок. Если один article вложен в другой, это означает, что дочерний article связан с родительским
Примеры: статья в блоге, комментарий, сообщение на форуме, виджет
Антипримеры: неотъемлимая часть статьи (раздел "шерсть" в статье о кошках), общая обертка страницы, навигация, вторичное содержимое

2. section - "документ или раздел приложения". Объекты, расположенные в section объединены обзим смыслом. Так же, служит для разделения текста на разделы (его часто вкладывают в article). Должен иметь заголовок (почти всегда)
Примеры: контентная часть страницы, обертка нескольких схожих статей, подраздел большой статьи
Антипримеры: блок, нужный только для стилизации, блок без заголовка, общая обертка страницы, навигация, второстепенное содержимое.

3. div - "универсальный контейнер". Это обычный блочный элемент без какого-либо семантического значения

4. Семантичность элементов в порядке возрастания: div(0) -> section(1) -> article(2)



Алгоритм выбора:

1. Будет ли содержимое блока иметь осмысленное значение само по себе, отдельно от страницы (например, в RSS-потоке)?
Да - это article. Нет - см. далее

2. Большие части содержимого блока объединены общим значением или это подраздел большого документа?
Да - это section. Нет - см. далее

3. Расслабьтесь, это div



Теги nav и figure

1. nav - группа ссылок на внешние страницы или на разделы текущей страницы. Как правило содержит маркированный список.
Примеры: главная навигация сайта, оглавление статьи
Антипримеры: пагинация, соц. ссылки, список рубрик записи в блоге, список тегов записи в блоге, "подвал" страницы со ссылками на правила, политику конфиденциальности и т.п. ссылками

2. figure - самодостаточное содержимое, обычно упоминаемиое в качестве смысловой единицы в основном тексте. Это может быть картинка, видео, аудио, таблица, цитата, блок кода, фрагмент текста и любое их сочетание.
Примеры: диаграмма, иллюстрирующая статью, вставка видео, упоминаемого в статье.
Антипримеры: логотип сайта, декоративное изображение



------------------------------------------------------------------
Информация устаревает
------------------------------------------------------------------

Неактуальные данные. которые можно встретить в HTML5

1. Тег hgroup. Исключен из спецификации, его больше нет.
2. Тег menu, Его в HTML5 нет
3. Атрибут pubdate тега time. Его тоже нет. Используйте микроформаты
4. Атрибут type тегов script и link. Его писать не нужно.



------------------------------------------------------------------
Нюансы работы с CSS
------------------------------------------------------------------

Трудноизлечимые проблемы CSS

1. Количество CSS на проекте всегда увеличивается - становится сложнее поддерживать
2. Философия CSS поощряет "плохие техники": повторения, плохая группировка, малопонятные связи между элементами (как элементами одного конкретного блока, так и всей страницы)
3. Обычный CSS сложно понять без контекста (HTML, к которому он применяется)
4. CSS поощряет переопределение свойств, что сильно осложняет поддержку кода
5. Часть CSS-свойств наследуется (пример: наследуются свойства шрифта)
6. Свойства одного элемента можжгут быть описаны в удаленных друг от друга местах кода

Отступы:

1. Внешние отступы должны быть у тех элементов, которые отступают друг от друга, а не у потомков отступающих элементов
2. Нужен вертикальный отступ - пропишите нижний отступ у нижерасположенного элемента (хорошо для потоковых блоков)
3. Нужен боковой отступ - пропишите правый отступ у элемента, расположенного слева.
4. Используйте paddingо, а не margin, если хотите гарантировано избежать "схлопывания"
5. Помните об отступах по умолчанию (заголовки, параграфы, списки), не полагайтесь на них
6. Когда у блока видим левый padding, но непонятно, есть ли правый - сделайте правый таким же, как и левый. То же - для верхнего и нижнего.

Блочная модель, размеры, позиционирование, float

1. Выбирайте боксовую модель сознательно. Если меняете, то лучше так:
html {box-sizing: border-box;}  *, *:before, *:after {box-sizing: inherit;}
2. Не фиксируйте высоту элементов, которые сами по себе не обладают высотой, если на то нет серьезных причин
3. Не фиксируйте ширину элементов, если на то нет серьезных причин. Ширина блоков должна контролироваться оберткой
4. Написали для какого-то элемента display: inline-block; - сразу напишите подходящее vertical-align
5. Написали для какого-то элемента float: left; (или right) - сразу укажите ему ширину
6. Сброс float-ов нужно делать непосредственно родителю float-элементов
7. Видите рядом пару float-элементов - дайте им обертку для сброса

Текст, формы

1. Всегда используйте указание шрифтов с альтернативами и типом в конце указания
2. При стилизации заголовков пишите CSS так, чтобы вместо тегов заголовков можно было использовать <div> или <p>: указывайте, как минимум (внутренний и внешний отступы, размер шрифта, интерлиньяж, плотность
3. При стилизации кнопок - пишите CSS так, чтобы кнопкой мог стать любой тег (и блочный, и строчный): указывайте блочность, внутренний и внешний отступы, свойства бордюра и фона, размер шрифта, интерлиньяж, плотность, запрещайте переносы.
Тестировать стоит на: <a>, <input type="submit">, <button>
4. Изменение размеров textarea не должно ломать верстку: textarea {resize: vertical;}



------------------------------------------------------------------
Файловая организация
------------------------------------------------------------------

1. Единая файловая система во всех проектах по верстке
2. Только строчные латинские буквы, цифры и разделители (_ и -) в имени файлов. Без пробелов.
3. По имени файла должно быть ясно, что в файле (без необходимости открывать файл)
4. Пример файловой структуры:
	_design\
	css\
	font\
	img\
	js\
	less\
	index.html



img\

1. приставка - тип - bg, icon, btn
2. корень - место использования
3. суффикс - модификатор, метка ретинизированного изображения
4. Пример: 
	sprite/
		icon_mail.png
		icon_mail--big.png
	bg_header.png
	logo.svg
	sprite.png
	sprite@x2.png
	TEMP_boobs.jpg
